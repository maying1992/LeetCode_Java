package com.example.leetcodejava.Algorithm.BinarySearch;

public class LeetCode540 {
    /**
     * LeetCode540. 有序数组中的单一元素
     * 给定一个只包含整数的有序数组，每个元素都会出现两次，唯有一个数只会出现一次，找出这个数。
     *
     * 示例 1:
     * 输入: [1,1,2,3,3,4,4,8,8]
     * 输出: 2
     *
     * 示例 2:
     * 输入: [3,3,7,7,10,11,11]
     * 输出: 10
     *
     * 注意: 您的方案应该在 O(log n)时间复杂度和 O(1)空间复杂度中运行。
     */

    /**
     * 方法：仅对偶数索引进行二分搜索
     * 事实证明我们只需要对偶数索引进行二分搜索。这种方法与方法二都是不错的方法，但是该方法比方法二更加优雅。
     * 在该算法中，我们对所有偶数索引进行搜索，直到遇到第一个其后元素不相同的索引。
     * 我们可以使用二分搜索替代线性搜索。
     * 在单个元素的后面，则成对的元素变为奇数索引后跟他们的同一元素。说明我们在检索单个元素后面的偶数索引时，
     * 其后都没有它的同一元素。因此，我们可以通过偶数索引确定单个元素在左侧还是右侧。
     *
     * 算法：
     * 奇数长度的数组首尾元素索引都为偶数，因此我们可以将 start 和 end 设置为数组首尾。
     * 当mid为偶数时，mid两边的数字个数为偶数个；当mid为奇数时，mid两边的数字个数为奇数个
     * 我们需要确保 mid 是偶数，如果为奇数，则将其减 1。
     * 然后，我们检查 mid 的元素是否与其后面索引的元素相同。
     * 如果相同，则我们知道 mid 不是单个元素。且单个元素在 mid 之后。则我们将 start 设置为 mid + 2。
     * 如果不相同，则我们知道单个元素位于 mid，或者在 mid 之前。我们将 end 设置为 mid。
     * 一旦 start == end，则当前搜索空间为 1 个元素，那么该元素为单个元素，我们将返回它。
     */
    public int singleNonDuplicate(int[] nums) {
        int start = 0, end = nums.length - 1;
        while (start < end) {
            int mid = start + (end - start) / 2;
            if (mid % 2 == 1) {
                mid--;
            }
            if (nums[mid] == nums[mid + 1]) {
                start = mid + 2;
            } else {
                end = mid;
            }
        }
        return nums[start];
    }

    /**
     * 复杂度分析
     *
     * 时间复杂度：O(logn/2) = O(logn)。我们仅对元素的一半进行二分搜索。
     * 空间复杂度：O(1)，仅用了常数的空间。
     */

}
