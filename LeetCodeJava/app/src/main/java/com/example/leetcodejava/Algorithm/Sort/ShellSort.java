package com.example.leetcodejava.Algorithm.Sort;

/**
 *  希尔排序
 *  希尔排序，也称递减增量排序算法，是插入排序的一种更高效的改进版本。但希尔排序是非稳定排序算法。
 *
 *  希尔排序是基于插入排序的以下两点性质而提出改进方法的：
 *  1、插入排序在对几乎已经排好序的数据操作时，效率高，即可以达到线性排序的效率；
 *  2、但插入排序一般来说是低效的，因为插入排序每次只能将数据移动一位；
 *
 *  希尔排序的基本思想是：先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，
 *  待整个序列中的记录“基本有序”时，再对全体记录进行依次直接插入排序。
 *
 *  代码实现
 *  在希尔排序的理解时，我们倾向于对于每一个分组，逐组进行处理，但在代码实现中，
 *  我们可以不用这么按部就班地处理完一组再调转回来处理下一组（这样还得加个for循环
 *  去处理分组）比如[5,4,3,2,1,0]，首次增量设gap=length/2=3,则为3组[5,2] [4,1] [3,0]，
 *  实现时不用循环按组处理，我们可以从第gap个元素开始，逐个跨组处理
 *
 *  可先理解插入排序后再来理解希尔排序
 */
public class ShellSort {

    public static void shellSort(int[] arr) {

        //增量gap，并逐步缩小增量
        for(int gap=arr.length/2;gap>0;gap/=2){
            //从第gap个元素，逐个对其所在组进行直接插入排序操作
            for(int i=gap;i<arr.length;i++){
                int j = i;
                int temp = arr[j];
                if(arr[j]<arr[j-gap]){
                    while(j-gap>=0 && temp<arr[j-gap]){
                        //移动法
                        arr[j] = arr[j-gap];
                        j-=gap;
                    }
                    arr[j] = temp;
                }
            }
        }
    }
}
