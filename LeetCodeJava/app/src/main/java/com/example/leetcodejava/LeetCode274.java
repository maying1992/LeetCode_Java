package com.example.leetcodejava;

import java.util.Arrays;

public class LeetCode274 {
    /**
     * LeetCode274.H 指数
     *
     * 给定一位研究者论文被引用次数的数组（被引用次数是非负整数）。编写一个方法，计算出研究者的 h 指数。
     * h指数的定义：h 代表“高引用次数”（high citations），一名科研人员的h指数是指他（她）的（
     * N篇论文中）总共有h篇论文分别被引用了至少h次。（其余的 N - h 篇论文每篇被引用次数不超过h次。）
     *
     * 例如：某人的h指数是20，这表示他已发表的论文中，每篇被引用了至少20次的论文总共有20篇。
     *
     * 示例：
     * 输入：citations = [3,0,6,1,5]
     * 输出：3
     * 解释：给定数组表示研究者总共有5篇论文，每篇论文相应的被引用了 3, 0, 6, 1, 5 次。
     * 由于研究者有3篇论文每篇至少被引用了3次，其余两篇论文每篇被引用不多于3次，所以她的h指数是3。
     *
     *
     * 提示：如果h有多种可能的值，h指数是其中最大的那个。
     */


    /**
     * 思路:
     *
     * 第一次看到这个概念比较难理解，看一下维基百科 的定义。
     *
     * H指数的计算基于其研究者的论文数量及其论文被引用的次数。赫希认为：一个人在其所有学术文章中有N篇论文分别被引用了至少N次，他的H指数就是N。
     * 如美国耶鲁大学免疫学家理查德·弗来沃发表的900篇文章中，有107篇被引用了107次以上，他的H指数是107。
     *
     * 可以按照如下方法确定某人的H指数：
     *
     * 将其发表的所有SCI论文按被引次数从高到低排序；
     * 从前往后查找排序后的列表，直到某篇论文的序号大于该论文被引次数。所得序号减一即为H指数。
     *
     */
    public int hIndex(int[] citations) {

        Arrays.sort(citations); // 默认的是从小到大排序，所以后边要倒着遍历
        int n = 1; // 论文序号
        //倒着遍历就是从大到小遍历了
        for (int i = citations.length - 1; i >= 0; i--) {
            // 论文序号大于该论文的被引次数
            if (n > citations[i]) {
                break;
            }
            n++;
        }
        // 所得序号减一即为H指数。
        return n - 1;
    }
}
